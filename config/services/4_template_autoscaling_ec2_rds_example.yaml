formations:
  dat:
    description: "glusterfs file system"
    ec2:
      gluster:
        ami: ami-xxxxxx
        role_overrides:
        capacity: 2
        instance_type: "m3.medium"
        chef:
          "glusterfs": {
              "server": {
                  "mount_directory": "/srv",
                  "volume": "escenic"
              }
          }
          "run_list": [
            "recipe[users::build]",
            "recipe[users::escenic]",
            "recipe[nfs::server]",
            "recipe[nfs::appname]"
          ]
        userdata_mounts:
          - [ /dev/mapper/lvm_vg-lvm_partition, /srv, "auto", "defaults,nobootwait", "0", "0" ]
        tags:
          environment_tags:
            prod:
              Role: "Gluster Instance"
              Backup: "00 02 * * * * H - 28"
            preprod:
              Role: "Gluster Instance"
              Backup: "00 00 * * * * H - 0"
        block_device_mappings:
          "sda1":
            device_name: "/dev/sda1"
            volume_size: "15"
            delete_on_termination: true
            snapshot_id:
              preprod: snap-xxxxxx
              prod: snap-xxxxxx
          "sdm":
            device_name: "/dev/sdm"
            volume_size: "800"
            snapshot_id:
              preprod: "snap-xxxxxx"
              prod: "snap-xxxxxx"
            delete_on_termination: true
        iam_policies:
         - describestacks
         - describeec2
    autoscaling_groups:
      LdapServer:
        ami: ami-xxxxxx
        app_username: "ldaptelegraph"
        snapshot: snap-xxxxxx
        minsize: 1
        maxsize: 1
        desired_capacity: 1
        tags:
          environment_tags:
            prod:
              name: "ldap"
              Backup: "00 00 * * * * H - 7"
            preprod:
              name: "ldap"
              Backup: "00 00 * * * * H - 0"
        launchconfig:
          name: "LdapLaunchConfig"
          instance_type: "m1.small"
          iam_policies:
           - describestacks
           - describeec2
           - s3full
          chef:
            "run_list": [
                "recipe[apt::tmg]",
                "recipe[base]",
                "recipe[chef-solo-search]",
                "recipe[users::ops]",
                "recipe[postfix]",
                "recipe[postfix::aliases]",
                "recipe[nagios::tmg_nrpe]",
                "recipe[apache2::default]",
                "recipe[users::escenic]",
                "recipe[escenic::rmi-hub]",
                "recipe[ldap::consolidated]"
            ]
          scaling_policies:
            LdapScaleUpPolicy:
              scaling_adjustment: "1"
              cooldown: "300"
            LdapScaleDownPolicy:
              scaling_adjustment: "-1"
              cooldown: "300"
          alarms:
            LdapCPUAlarmHigh:
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "5"
              threshold: "80"
              alarm_actions: "LdapScaleUpPolicy"
              comparison_operator: "GreaterThanThreshold"
              description: "Scale-up if CPU > 80% for 5min"
            LdapCPUAlarmLow:
              description: "Scale-down if CPU < 60% for 15min"
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "15"
              threshold: "60"
              alarm_actions: "LdapScaleDownPolicy"
              comparison_operator: "LessThanThreshold"
        elb:
          listeners:
            ldap:
              elb_port: "10389"
              instance_port: "10389"
              protocol: "TCP"
            rmi:
              elb_port: "1099"
              instance_port: "1099"
              protocol: "TCP"
          scheme: "internal"
          healthcheckpath: "TCP:10389"
        dns:
          LdapDNSRecord:
            name: ldap
            resource: LdapServerLB
            resource_type: DNSName
            type: CNAME
          RmiDNSRecord:
            name: rmi
            resource: LdapServerLB
            resource_type: DNSName
            type: CNAME
  db:
    description: "mysql rds instance"
    rds:
      db01:
        tags:
          environment_tags:
            prod:
              Role: "Rds Instance"
            preprod:
              Role: "Rds Instance"
        db:
          allocated_storage: "100"
          auto_minor_version_upgrade: true
          instance_class: "db.m3.large"
          engine_version: "5.5.33"
          family: "mysql5.5"
          snapshot:
           prod: "fashion-skin-change"
           preprod: "appname-initial"
          multiaz: false
          master_username: "root"
          app_username: "escenic"
          api_app_username: "api"
        dns:
          MyDBDnsRecord:
            name: mysql
            resource: db01
            resource_type: Endpoint.Address
            type: CNAME
        ec2_security_group:
          group_description: "RDS Security Group"
          from_port: "3306"
          to_port: "3306"
        rds_subnet_group:
          group_description: "rds subnet group"
  be:
    description: "telegraph BE CMS and LDAP"
    autoscaling_groups:
      BeServer:
        ami: ami-8611e4f1
        app_username: "escenic"
        minsize: 1
        maxsize: 1
        desired_capacity: 1
        tags:
          environment_tags:
            prod:
              name: "be"
              Backup: "00 02 * * * * H - 7"
            preprod:
              name: "be"
              Backup: "00 00 * * * * H - 0"
        launchconfig:
          name: "BeLaunchConfig"
          instance_type: "m3.medium"
          block_device_mappings:
            "sda1":
              device_name: "/dev/sda1"
              volume_size: "30"
              delete_on_termination: true
          iam_policies:
           - describestacks
           - describeec2
          chef:
            "glusterfs": {
                "client": {
                    "volume": "escenic",
                    "mount_directory": "/srv"
                }
            }
            "env": {
                "server" : {
                    "class" : "be"
                }
            }
            "apache": {
                "prefork": { "startservers": "5",
                             "minspareservers": "5",
                             "maxspareservers": "10",
                             "serverlimit": "32",
                             "maxclients": "32",
                             "maxrequestsperchild": "100"
                },
                "default_modules": [ "alias","deflate","php5","headers","rewrite","authz_host","mime","info","status","reqtimeout","setenvif" ]
            }
            "newrelic": {
                "application_monitoring": {
                    "appname":"app-BE"
                }
            }
            "run_list": [
                "recipe[users::build]",
                "recipe[users::escenic]",
                "recipe[users::devs]",
                "recipe[mysql::client]",
                "recipe[escenic::wait-for-nfs-port]",
                "recipe[nfs::client]",
                "recipe[apache2]",
                "recipe[escenic::wait-for-mysql]",
                "recipe[database::xxxxxx]",
                "recipe[escenic::xxxxxx]",
                "recipe[apache2::xxxxxx]",
                "recipe[apache2::apache_logs]"
            ]
          scaling_policies:
            BeScaleUpPolicy:
              scaling_adjustment: "1"
              cooldown: "300"
            BeScaleDownPolicy:
              cooldown: "300"
              scaling_adjustment: "-1"
          alarms:
            BeCPUAlarmHigh:
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "5"
              threshold: "80"
              alarm_actions: "BeScaleUpPolicy"
              comparison_operator: "GreaterThanThreshold"
              description: "Scale-up if CPU > 80% for 5min"
            BeCPUAlarmLow:
              description: "Scale-down if CPU < 60% for 15min"
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "15"
              threshold: "60"
              alarm_actions: "BeScaleDownPolicy"
              comparison_operator: "LessThanThreshold"
        elb:
          listeners:
            tomcat:
              elb_port: "8080"
              instance_port: "8080"
              protocol: "HTTP"
            apache:
              elb_port: "80"
              instance_port: "80"
              protocol: "HTTP"
          healthcheckpath: "HTTP:80/health.html"
        dns:
          BeDNSRecord:
            name: be
            resource: BeServerLB
            resource_type: DNSName
            type: CNAME
      CmsServer:
        ami: ami-8611e4f1
        app_username: "escenic"
        minsize: 1
        maxsize: 1
        desired_capacity: 1
        tags:
          environment_tags:
            prod:
              name: "cms"
              Backup: "00 02 * * * * H - 7"
            preprod:
              name: "cms"
              Backup: "00 00 * * * * H - 0"
        launchconfig:
          name: "CmsLaunchConfig"
          userdata: "CmsUserData"
          instance_type: "m3.medium"
          block_device_mappings:
            "sda1":
              device_name: "/dev/sda1"
              volume_size: "30"
              delete_on_termination: true
          iam_policies:
           - describestacks
           - describeec2
          chef:
            "glusterfs": {
                "client": {
                    "volume": "escenic",
                    "mount_directory": "/srv"
                }
            }
            "env": {
                "server" : {
                    "class" : "cms"
                }
            }
            "apache": {
                "prefork": { "startservers": "5",
                             "minspareservers": "5",
                             "maxspareservers": "10",
                             "serverlimit": "32",
                             "maxclients": "32",
                             "maxrequestsperchild": "100"
                },
                "default_modules": [ "alias","deflate","php5","headers","rewrite","authz_host","mime","info","status","reqtimeout","setenvif" ]
            }
            "newrelic": {
                "application_monitoring": {
                    "appname":"appname-CMS"
                }
            }
            "run_list": [
                "recipe[users::build]",
                "recipe[users::escenic]",
                "recipe[users::devs]",
                "recipe[mysql::client]",
                "recipe[escenic::wait-for-nfs-port]",
                "recipe[nfs::client]",
                "recipe[apache2]",
                "recipe[escenic::wait-for-mysql]",
                "recipe[apache2::apache_logs]"
            ]
          scaling_policies:
            CmsScaleUpPolicy:
              scaling_adjustment: "1"
              cooldown: "300"
            CmsScaleDownPolicy:
              cooldown: "300"
              scaling_adjustment: "-1"
          alarms:
            CmsCPUAlarmHigh:
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "5"
              threshold: "80"
              alarm_actions: "CmsScaleUpPolicy"
              comparison_operator: "GreaterThanThreshold"
              description: "Scale-up if CPU > 80% for 5min"
            CmsCPUAlarmLow:
              description: "Scale-down if CPU < 60% for 15min"
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "15"
              threshold: "60"
              alarm_actions: "CmsScaleDownPolicy"
              comparison_operator: "LessThanThreshold"
        elb:
          listeners:
            tomcat:
              elb_port: "8080"
              instance_port: "8080"
              protocol: "HTTP"
            apache:
              elb_port: "80"
              instance_port: "80"
              protocol: "HTTP"
            rmi:
              elb_port: "8123"
              instance_port: "8123"
              protocol: "TCP"
          healthcheckpath: "HTTP:80/health.html"
        dns:
          CmsDNSRecord:
            name: cms
            resource: CmsServerLB
            resource_type: DNSName
            type: CNAME
      PreviewServer:
        ami: ami-8611e4f1
        app_username: "escenic"
        minsize: 1
        maxsize: 1
        desired_capacity: 1
        tags:
          environment_tags:
            prod:
              name: "preview"
              Backup: "00 02 * * * * H - 7"
            preprod:
              name: "preview"
              Backup: "00 00 * * * * H - 0"
        launchconfig:
          name: "PrebiewLaunchConfig"
          instance_type: "m3.medium"
          block_device_mappings:
            "sda1":
              device_name: "/dev/sda1"
              volume_size: "30"
              delete_on_termination: true
          iam_policies:
           - describestacks
           - describeec2
          chef:
            "glusterfs": {
                "client": {
                    "volume": "escenic",
                    "mount_directory": "/srv"
                }
            }
            "env": {
                "server" : {
                    "class" : "preview"
                }
            }
            "apache": {
                "prefork": { "startservers": "5",
                             "minspareservers": "5",
                             "maxspareservers": "10",
                             "serverlimit": "32",
                             "maxclients": "32",
                             "maxrequestsperchild": "100"
                },
                "default_modules": [ "alias","deflate","php5","headers","rewrite","authz_host","mime","info","status","reqtimeout","setenvif" ]
            }
            "newrelic": {
                "application_monitoring": {
                    "appname":"App-Preview"
                }
            }
            "run_list": [
                "recipe[users::build]",
                "recipe[users::escenic]",
                "recipe[users::devs]",
                "recipe[mysql::client]",
                "recipe[escenic::wait-for-nfs-port]",
                "recipe[nfs::client]",
                "recipe[apache2]",
                "recipe[escenic::wait-for-mysql]",
                "recipe[database::appname]",
                "recipe[escenic::appname]",
                "recipe[apache2::appname]",
                "recipe[apache2::tmg_apache_logs]"
            ]
          scaling_policies:
            PreviewScaleUpPolicy:
              scaling_adjustment: "1"
              cooldown: "300"
            PreviewScaleDownPolicy:
              cooldown: "300"
              scaling_adjustment: "-1"
          alarms:
            PreviewCPUAlarmHigh:
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "5"
              threshold: "80"
              alarm_actions: "PreviewScaleUpPolicy"
              comparison_operator: "GreaterThanThreshold"
              description: "Scale-up if CPU > 80% for 5min"
            PreviewCPUAlarmLow:
              description: "Scale-down if CPU < 60% for 15min"
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "15"
              threshold: "60"
              alarm_actions: "PreviewScaleDownPolicy"
              comparison_operator: "LessThanThreshold"
        elb:
          elb_port: 80
          instance_port: 80
          protocol: "HTTP"
          healthcheckpath: "HTTP:80/health.html"
        dns:
          PreviewDNSRecord:
            name: preview
            resource: PreviewServerLB
            resource_type: DNSName
            type: CNAME
  app:
    description: "escenic telegraph frontend"
    autoscaling_groups:
      FeServer:
        ami: ami-8611e4f1
        app_username: "escenic"
        minsize: 2
        maxsize: 6
        desired_capacity: 2
        tags:
          environment_tags:
            prod:
              name: "fe"
              Backup: "00 02 * * * * H - 7"
            preprod:
              name: "fe"
              Backup: "00 00 * * * * H - 0"
        launchconfig:
          name: "FeLaunchConfig"
          instance_type: "m3.medium"
          block_device_mappings:
            "sda1":
              device_name: "/dev/sda1"
              volume_size: "30"
              delete_on_termination: true
          iam_policies:
           - describestacks
           - describeec2
          chef:
            "glusterfs": {
                "client": {
                    "volume": "escenic",
                    "mount_directory": "/srv"
                }
            }
            "env": {
                "server" : {
                    "class" : "fe"
                }
            }
            "apache": {
                "prefork": { "startservers": "5",
                             "minspareservers": "5",
                             "maxspareservers": "10",
                             "serverlimit": "32",
                             "maxclients": "32",
                             "maxrequestsperchild": "100"
                },
                "default_modules": [ "alias","deflate","php5","headers","rewrite","authz_host","mime","info","status","reqtimeout","setenvif" ]
            }
            "newrelic": {
                "application_monitoring": {
                    "appname":"appname"
                }
            }
            "run_list": [
                "recipe[users::build]",
                "recipe[users::escenic]",
                "recipe[users::devs]",
                "recipe[mysql::client]",
                "recipe[escenic::wait-for-nfs-port]",
                "recipe[nfs::client]",
                "recipe[apache2]",
                "recipe[escenic::wait-for-mysql]",
                "recipe[database::appname]",
                "recipe[escenic::appname]",
                "recipe[apache2::appname]",
                "recipe[apache2::tmg_apache_logs]"
            ]
          scaling_policies:
            FeScaleUpPolicy:
              scaling_adjustment: "1"
              cooldown: "300"
            FeScaleDownPolicy:
              cooldown: "300"
              scaling_adjustment: "-1"
          alarms:
            FeCPUAlarmHigh:
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "5"
              threshold: "80"
              alarm_actions: "FeScaleUpPolicy"
              comparison_operator: "GreaterThanThreshold"
              description: "Scale-up if CPU > 80% for 5min"
            FeCPUAlarmLow:
              description: "Scale-down if CPU < 60% for 15min"
              metric_name: "CPUUtilization"
              namespace: "AWS/EC2"
              statistic: "Average"
              period: "60"
              evaluation_periods: "15"
              threshold: "60"
              alarm_actions: "FeScaleDownPolicy"
              comparison_operator: "LessThanThreshold"
        elb:
          elb_port: 80
          instance_port: 80
          protocol: "HTTP"
          healthcheckpath: "HTTP:80/health.html"
          security_groups:
            prod:
            - "infra-xxxxxx"
            preprod:
            - "infra-xxxxxx"
        dns:
          FeDNSRecord:
            name: fe
            resource: FeServerLB
            resource_type: DNSName
            type: CNAME
    elasticache:
      Elasticache:
        tags:
          Role: "Elasticache Instance"
          Env: "Tag Test"
        elasticache:
          auto_minor_version_upgrade: true
          instance_class: "cache.m1.medium"
          engine: "memcached"
          engine_version: "1.4.14"
          capacity: "1"
          cache_subnet_group_name: "elasticache-group"
        dns:
          ElasticacheDnsRecord:
            name: elasticache
            resource: Elasticache
            resource_type: ConfigurationEndpoint.Address
            type: CNAME
db_parameters:
  auto_increment_increment: "1"
  max_allowed_packet: "16777216"
  lower_case_table_names: "1"
